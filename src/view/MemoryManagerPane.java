package view;

import java.util.ArrayList;

import controller.ViewController.HandleCompact;
import controller.ViewController.HandleRemove;
import controller.ViewController.HandleRun;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Rectangle;

/**
 * @author Peter Vukas
 *
 */
public class MemoryManagerPane extends BorderPane {

	@FXML
	private VBox memVBox;
	@FXML
	private ComboBox<String> pcmbBox;
	@FXML
	private ComboBox<String> algorithmCmbBox;
	@FXML
	private Button addBtn;
	@FXML
	private Button compactionBtn;
	@FXML
	private Button removeBtn;
	@FXML
	private TextField sizeBox;

	@FXML
	void initialize() {
		assert memVBox != null : "fx:id=\"memVBox\" was not injected: check your FXML file 'Manager.fxml'.";
		assert pcmbBox != null : "fx:id=\"pcmbBox\" was not injected: check your FXML file 'Manager.fxml'.";
		assert algorithmCmbBox != null : "fx:id=\"algorithmCmbBox\" was not injected: check your FXML file 'Manager.fxml'.";
		assert addBtn != null : "fx:id=\"addBtn\" was not injected: check your FXML file 'Manager.fxml'.";
		assert compactionBtn != null : "fx:id=\"compactionBtn\" was not injected: check your FXML file 'Manager.fxml'.";
		assert removeBtn != null : "fx:id=\"removeBtn\" was not injected: check your FXML file 'Manager.fxml'.";

		algorithmCmbBox.getItems().add("First Fit");
		algorithmCmbBox.getItems().add("Best Fit");
		algorithmCmbBox.getItems().add("Worst Fit");
		populateProcessList(10);
	}

	/**
	 * Adds action events to the three buttons displayed on this pane.
	 * 
	 * @param handleRun     Action event which will be performed when the button
	 *                      labeled "Add" is clicked
	 * @param handleCompact Action event which will be performed when the button
	 *                      labeled "Compact" is clicked
	 * @param handleRemove  Action event which will be performed when the button
	 *                      labeled "Remove" is clicked
	 */
	public void setOnActions(EventHandler<ActionEvent> handleRun, EventHandler<ActionEvent> handleCompact,
			EventHandler<ActionEvent> handleRemove, EventHandler<ActionEvent> handleProcessSelected) {
		addBtn.setOnAction(handleRun);
		compactionBtn.setOnAction(handleCompact);
		removeBtn.setOnAction(handleRemove);
		pcmbBox.setOnAction(handleProcessSelected);
	}

	/**
	 * Refreshes the memory display with all elements in the array list
	 * 
	 * @param als An array list of Strings of data. Each string should represent the
	 *            data for 1 memory object. The format is comma delimited in the
	 *            order: "Name,StartAddress,Size"
	 */
	public void refreshMemoryDisplay(ArrayList<String> als) {
		memVBox.getChildren().clear();
		for (String s : als) {
			memVBox.getChildren().add(memoryBlock(s));
		}
	}

	/**
	 * @param datum String of data to be contained in this memory block. The format
	 *              is comma delimited in the order: "Name,StartAddress,Size"
	 * @return Formatted rectangle
	 */
	private Rectangle memoryBlock(String datum) {
		Rectangle rectangle = new Rectangle();
		// TODO Logic to add the string data into the rectangle
		return rectangle;
	}

	/**
	 * Fills the list combo box with processes using the auto generated names
	 * "Process #" where the # is their index + 1
	 * 
	 * @param number Number of processes to populate the list with
	 */
	public void populateProcessList(int number) {
		pcmbBox.getItems().clear();
		for (int i = 0; i < number; i++) {
			pcmbBox.getItems().add(String.format("Process %2d", i + 1));
		}
	}

	/**
	 * Gets the user selected value in the Process combo box
	 * 
	 * @return The currently selected process
	 */
	public String selectedProcess() {
		return pcmbBox.getValue();
	}

	/**
	 * Gets the user selected value in the Algorithm combo box
	 * 
	 * @return The currently selected algorithm. Values include: "First Fit", "Best
	 *         Fit", "Worst Fit"
	 */
	public String selectedAlgorithm() {
		return algorithmCmbBox.getValue();
	}

	/**
	 * Names in the Process Combo Box are generated by the following method: for(int
	 * i = 0; i < number; i++) { pcmbBox.getItems().add(String.format("Process %2d",
	 * i + 1)); }
	 * 
	 * @return The number of processes in the process combo box
	 */
	public int numberOfProcesses() {
		return pcmbBox.getItems().size();
	}

	/**
	 * Gets the desired size of the Process. If the value the user entered is not an
	 * integer, a -1 will be returned and the user will be informed. If the user
	 * enters a negative number, the absolute value will be used instead.
	 * 
	 * @return The size the user specified they wanted.
	 */
	public int getProcessSize() {
		try {
			return Math.abs(Integer.valueOf(sizeBox.getText()));
		} catch (NumberFormatException e) {
			// TODO Error Box logic
			return -1;
		}
	}
}
